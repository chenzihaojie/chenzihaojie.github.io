<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Deepseek AI技术深度解析：模型架构与实现细节</title>
    <url>/2025/06/30/deepseek-ai-technical-overview/</url>
    <content><![CDATA[<h1 id="Deepseek-AI技术深度解析：模型架构与实现细节"><a href="#Deepseek-AI技术深度解析：模型架构与实现细节" class="headerlink" title="Deepseek AI技术深度解析：模型架构与实现细节"></a>Deepseek AI技术深度解析：模型架构与实现细节</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>本文将深入探讨Deepseek AI的技术实现细节，重点关注其模型架构、训练过程和优化策略。通过分析具体的实现细节，揭示其在性能和效率方面的优势。</p>
<span id="more"></span>

<h2 id="2-核心模型架构"><a href="#2-核心模型架构" class="headerlink" title="2. 核心模型架构"></a>2. 核心模型架构</h2><h3 id="2-1-Transformer-XL架构改进"><a href="#2-1-Transformer-XL架构改进" class="headerlink" title="2.1 Transformer-XL架构改进"></a>2.1 Transformer-XL架构改进</h3><p>Deepseek AI在Transformer-XL基础上进行了以下关键改进：</p>
<ol>
<li><p><strong>分段注意力机制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分段注意力实现</span></span><br><span class="line">segment_length = <span class="number">512</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">segment_attention</span>(<span class="params">query, key, value, segment_mask</span>):</span><br><span class="line">    <span class="comment"># 实现分段注意力计算</span></span><br><span class="line">    <span class="comment"># 通过缓存机制优化长序列处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>相对位置编码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relative_position_encoding</span>(<span class="params">length, num_heads, head_size</span>):</span><br><span class="line">    <span class="comment"># 生成相对位置编码矩阵</span></span><br><span class="line">    <span class="comment"># 支持任意长度的序列</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2-知识蒸馏实现"><a href="#2-2-知识蒸馏实现" class="headerlink" title="2.2 知识蒸馏实现"></a>2.2 知识蒸馏实现</h3><ol>
<li><strong>多阶段蒸馏</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DistillationPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, teacher_model, student_model</span>):</span><br><span class="line">        <span class="variable language_">self</span>.teacher = teacher_model</span><br><span class="line">        <span class="variable language_">self</span>.student = student_model</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stage_1</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># 语义对齐蒸馏</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stage_2</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># 注意力模式蒸馏</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stage_3</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># 特征表示蒸馏</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-训练优化策略"><a href="#3-训练优化策略" class="headerlink" title="3. 训练优化策略"></a>3. 训练优化策略</h2><h3 id="3-1-混合精度训练实现"><a href="#3-1-混合精度训练实现" class="headerlink" title="3.1 混合精度训练实现"></a>3.1 混合精度训练实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MixedPrecisionTrainer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, optimizer</span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        <span class="variable language_">self</span>.optimizer = optimizer</span><br><span class="line">        <span class="variable language_">self</span>.scaler = torch.cuda.amp.GradScaler()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">with</span> torch.cuda.amp.autocast():</span><br><span class="line">            output = <span class="variable language_">self</span>.model(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">self, loss</span>):</span><br><span class="line">        <span class="variable language_">self</span>.scaler.scale(loss).backward()</span><br><span class="line">        <span class="variable language_">self</span>.scaler.step(<span class="variable language_">self</span>.optimizer)</span><br><span class="line">        <span class="variable language_">self</span>.scaler.update()</span><br></pre></td></tr></table></figure>

<h3 id="3-2-数据并行与模型并行"><a href="#3-2-数据并行与模型并行" class="headerlink" title="3.2 数据并行与模型并行"></a>3.2 数据并行与模型并行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParallelTrainer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, num_gpus</span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        <span class="variable language_">self</span>.num_gpus = num_gpus</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">data_parallel</span>(<span class="params">self, batch</span>):</span><br><span class="line">        <span class="comment"># 实现数据并行</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">model_parallel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 实现模型参数分割</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="4-性能优化细节"><a href="#4-性能优化细节" class="headerlink" title="4. 性能优化细节"></a>4. 性能优化细节</h2><h3 id="4-1-内存优化策略"><a href="#4-1-内存优化策略" class="headerlink" title="4.1 内存优化策略"></a>4.1 内存优化策略</h3><ol>
<li><p><strong>参数量化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quantize_weights</span>(<span class="params">weights, bits=<span class="number">8</span></span>):</span><br><span class="line">    <span class="comment"># 实现权重量化</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>缓存机制</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CacheManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_size</span>):</span><br><span class="line">        <span class="variable language_">self</span>.cache = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.max_size = max_size</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="comment"># 实现LRU缓存策略</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-2-推理加速"><a href="#4-2-推理加速" class="headerlink" title="4.2 推理加速"></a>4.2 推理加速</h3><ol>
<li><p><strong>批处理优化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">batch_optimization</span>(<span class="params">batch_size, sequences</span>):</span><br><span class="line">    <span class="comment"># 实现动态批处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>异步计算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncExecutor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_workers</span>):</span><br><span class="line">        <span class="variable language_">self</span>.pool = ThreadPoolExecutor(max_workers=num_workers)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">submit_task</span>(<span class="params">self, task</span>):</span><br><span class="line">        <span class="comment"># 异步执行任务</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="5-技术创新点"><a href="#5-技术创新点" class="headerlink" title="5. 技术创新点"></a>5. 技术创新点</h2><h3 id="5-1-动态上下文窗口"><a href="#5-1-动态上下文窗口" class="headerlink" title="5.1 动态上下文窗口"></a>5.1 动态上下文窗口</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicContext</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_length</span>):</span><br><span class="line">        <span class="variable language_">self</span>.max_length = max_length</span><br><span class="line">        <span class="variable language_">self</span>.current_context = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, new_tokens</span>):</span><br><span class="line">        <span class="comment"># 动态调整上下文窗口</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-增量学习机制"><a href="#5-2-增量学习机制" class="headerlink" title="5.2 增量学习机制"></a>5.2 增量学习机制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IncrementalLearning</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_model</span>):</span><br><span class="line">        <span class="variable language_">self</span>.base_model = base_model</span><br><span class="line">        <span class="variable language_">self</span>.updates = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adapt</span>(<span class="params">self, new_data</span>):</span><br><span class="line">        <span class="comment"># 实现增量学习</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="6-性能评估与测试"><a href="#6-性能评估与测试" class="headerlink" title="6. 性能评估与测试"></a>6. 性能评估与测试</h2><h3 id="6-1-基准测试"><a href="#6-1-基准测试" class="headerlink" title="6.1 基准测试"></a>6.1 基准测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Benchmark</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, dataset</span>):</span><br><span class="line">        <span class="comment"># 执行性能测试</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-可靠性测试"><a href="#6-2-可靠性测试" class="headerlink" title="6.2 可靠性测试"></a>6.2 可靠性测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReliabilityTest</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stress_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 执行压力测试</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="7-结论"><a href="#7-结论" class="headerlink" title="7. 结论"></a>7. 结论</h2><p>本文深入分析了Deepseek AI的技术实现细节，从模型架构到训练优化，再到性能优化，全面展示了其技术优势。通过具体的代码实现展示了其在性能和效率上的创新。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Vaswani, A., et al. (2017). Attention is all you need. NeurIPS 2017.<br>[2] Dai, Z., et al. (2019). Transformer-XL: Attentive language models beyond a fixed-length context. ACL 2019.<br>[3] Hinton, G., et al. (2015). Distilling the knowledge in a neural network. arXiv:1503.02531.</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Deep Learning</tag>
        <tag>LLM</tag>
        <tag>技术分析</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装Confluence</title>
    <url>/2018/12/10/docker-install-confluence/</url>
    <content><![CDATA[<p>使用docker安装atlassian家族软件Confluence，已经集成破解文件。利用docker三剑客之一docker-compose一键启动，最小配置化，方便省心。</p>
<span id="more"></span>

<h2 id="docker安装Confluence"><a href="#docker安装Confluence" class="headerlink" title="docker安装Confluence"></a>docker安装Confluence</h2><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><p>直接下载官方二进制文件安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.17.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="下载集成的Confluence镜像"><a href="#下载集成的Confluence镜像" class="headerlink" title="下载集成的Confluence镜像"></a>下载集成的Confluence镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull chenzihaojie/atlassian-confluence:6.12.2</span><br></pre></td></tr></table></figure>

<h3 id="启动Confluence容器"><a href="#启动Confluence容器" class="headerlink" title="启动Confluence容器"></a>启动Confluence容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chenzihaojie/atlassian-docker</span><br><span class="line"><span class="built_in">cd</span> atlassian-docker/confluence/6.12.2/</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$HOME</span>/confluence/var_atlassian_confluence&quot;</span></span><br><span class="line"><span class="built_in">chown</span> -R nobody:nobody <span class="variable">$HOME</span>/confluence</span><br><span class="line"><span class="built_in">chmod</span> -R 777 <span class="variable">$HOME</span>/confluence</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="配置Confluence"><a href="#配置Confluence" class="headerlink" title="配置Confluence"></a>配置Confluence</h3><h4 id="打开Confluence首页"><a href="#打开Confluence首页" class="headerlink" title="打开Confluence首页"></a>打开Confluence首页</h4><p>http:&#x2F;&#x2F;主机ip:20040</p>
<h4 id="选择中文"><a href="#选择中文" class="headerlink" title="选择中文"></a>选择中文</h4><p><img src="/images/confluence-2018-12-10_205028.png"></p>
<h4 id="设置Confluence"><a href="#设置Confluence" class="headerlink" title="设置Confluence"></a>设置Confluence</h4><p>选择第二项, 适用于生产环境安装</p>
<h4 id="获取应用"><a href="#获取应用" class="headerlink" title="获取应用"></a>获取应用</h4><p>跳过，直接下一步<br><img src="/images/confluence-2018-12-10_205230.png"></p>
<h4 id="获取授权码并填写"><a href="#获取授权码并填写" class="headerlink" title="获取授权码并填写"></a>获取授权码并填写</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar confluence_keygen.jar</span><br><span class="line"></span><br><span class="line">Name: admin@test.com</span><br><span class="line">Email: invisible@scence.nl</span><br><span class="line">Organization: iNViSiBLE TEAM</span><br><span class="line">Server ID: BX5E-O9NZ-AJJQ-MDY0</span><br><span class="line">Key: AAABOA0ODAoPeJxtkM1uwjAQhO9+Cks9J0oCqIBkCRP7AM0PbaAqvRl301oKDrLjtPTpa0i5VD2uZ</span><br><span class="line">nbm272rnMYMJI5mOB7Px5N5MsVptcVJFE8RAyuNOnWq1SRtdd040BJQ4Y4HMGW9s2AsCWKUGhAXE</span><br><span class="line">xMdkMtmECdBNEN+pxOyK8QRyLfQsKhbbXsFn6Fsj0j6xNDLqgfSGQc3O8+FaojSvbLq0MDCStAQ6</span><br><span class="line">gbxXjTuWkRq0VgYEjLldQvb8wmuRWmZ5/wpXdEM+SDdgRYemn+dlDkPgKPR/QUwmQwBt3PSxtkOT</span><br><span class="line">NG+gSURqnhB9uUO5/SB45xjiivK8IYWjIaoNO9CKzvAqOJZVWqZcbzlNEcVmB7MipHly4T7NxSvA</span><br><span class="line">V2vH4Oc7SP0S+vVbMVu0/9wG2fkh7Dw56s/vcaNazAsAhREKaGoylndxUetI3DTWCqRZheulgIUM</span><br><span class="line">SH77Z1whKSHysyIR9x83wxqGM8=X02fj</span><br></pre></td></tr></table></figure>
<p><img src="/images/confluence-2018-12-10_205450.png"></p>
<h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">数据库类型：MySQL</span><br><span class="line">主机：confluence-mysql</span><br><span class="line">数据库：confluence</span><br><span class="line">用户：confluence</span><br><span class="line">密码：confluence</span><br></pre></td></tr></table></figure>
<p><img src="/images/confluence-2018-12-10_205629.png"></p>
<h4 id="加载内容"><a href="#加载内容" class="headerlink" title="加载内容"></a>加载内容</h4><p>随便选择<br><img src="/images/confluence-2018-12-10_210533.png"></p>
<h4 id="配置管理员用户"><a href="#配置管理员用户" class="headerlink" title="配置管理员用户"></a>配置管理员用户</h4><p><img src="/images/confluence-2018-12-10_210612.png"></p>
<h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成~~"></a>安装完成~~</h4>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>confluence</tag>
        <tag>atlassian</tag>
      </tags>
  </entry>
  <entry>
    <title>drone+gitlab - docker安装</title>
    <url>/2019/05/23/docker-install-drone-gitlab/</url>
    <content><![CDATA[<p>最近研究了一下drone，尝试将drone和gitlab集合在一起，做CI服务。drone官方是有说明文档，支持gitlab的，见drone server的安装文档。我个人安装过程中碰了一些坑，在这里记下安装过程。</p>
<span id="more"></span>

<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><p>直接下载官方二进制文件安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.17.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="获取gitlab授权"><a href="#获取gitlab授权" class="headerlink" title="获取gitlab授权"></a>获取gitlab授权</h3><p>这里省略gitlab的安装，gitlab地址：172.16.0.189</p>
<p>首先需要登录gitlab管理员账号，创建一个名为”drone”的应用</p>
<p><a href="http://172.16.0.123:8080/">http://172.16.0.123:8080</a> 是drone server的服务地址，创建完成后记得保存CLIENT_ID和CLIENT_SECRET</p>
<p><img src="/images/2019-05-19_193426.png"></p>
<p>然后打开gitlab的网络限制 - 允许来自钩子和服务对本地网络的请求</p>
<p><img src="/images/2019-05-19_194102.png"></p>
<h3 id="安装drone-1-0"><a href="#安装drone-1-0" class="headerlink" title="安装drone 1.0"></a>安装drone 1.0</h3><p>使用docker-compose的方式启动一个drone server和一个drone agent</p>
<p>docker-compose.yml 如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;2&quot;</span></span><br><span class="line">services:</span><br><span class="line">  drone-server:</span><br><span class="line">    image: drone/drone:latest</span><br><span class="line">    container_name: drone-server</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">      - ./drone/:/data/</span><br><span class="line">    extra_hosts:</span><br><span class="line">      - <span class="string">&quot;git.rhel.cc:172.16.0.189&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - DRONE_GITLAB_SERVER=http://172.16.0.189</span><br><span class="line">      - DRONE_USER_CREATE=username:zane,admin:<span class="literal">true</span></span><br><span class="line">      - DRONE_GITLAB_CLIENT_ID=af829bc7075cbe79603b79086f0d71654ecfde7092ba9b928d4327868e57e610</span><br><span class="line">      - DRONE_GITLAB_CLIENT_SECRET=a5eedb2a1fcb21c33b0610125cd9743db2ab0d99e7931f2ba1603cf9717ea668</span><br><span class="line">      - DRONE_GIT_ALWAYS_AUTH=<span class="literal">false</span></span><br><span class="line">      - DRONE_RUNNER_CAPACITY=2</span><br><span class="line">      - DRONE_SERVER_HOST=172.16.0.123:8080</span><br><span class="line">      - DRONE_SERVER_PROTO=http</span><br><span class="line">      - DRONE_RPC_SECRET=secret</span><br><span class="line">      - DRONE_TLS_AUTOCERT=<span class="literal">false</span></span><br><span class="line">      - DRONE_LOGS_DEBUG=<span class="literal">true</span></span><br><span class="line">      - DRONE_LOGS_COLOR=<span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">  drone-agent:</span><br><span class="line">    image: drone/agent:latest</span><br><span class="line">    container_name: drone-agent</span><br><span class="line">    <span class="built_in">command</span>: agent</span><br><span class="line">    depends_on:</span><br><span class="line">      - drone-server</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">    extra_hosts:</span><br><span class="line">      - <span class="string">&quot;git.rhel.cc:172.16.0.189&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai    </span><br><span class="line">      - DRONE_RPC_SERVER=drone-server:9000</span><br><span class="line">      - DRONE_RPC_SECRET=secret</span><br><span class="line">      - DRONE_RUNNER_CAPACITY=2</span><br><span class="line">      - DRONE_RUNNER_NAME=172.16.0.123</span><br><span class="line">      - DRONE_LOGS_DEBUG=<span class="literal">true</span></span><br><span class="line">      - DRONE_LOGS_COLOR=<span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br></pre></td></tr></table></figure>

<h3 id="登录drone，项目配置设为Trusted"><a href="#登录drone，项目配置设为Trusted" class="headerlink" title="登录drone，项目配置设为Trusted"></a>登录drone，项目配置设为Trusted</h3><p><img src="/images/2019-05-19_200526.png"></p>
<h3 id="编写-drone-yml文件，测试使用"><a href="#编写-drone-yml文件，测试使用" class="headerlink" title="编写.drone.yml文件，测试使用"></a>编写.drone.yml文件，测试使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workspace:</span><br><span class="line">  base: /go</span><br><span class="line">  path: src/github.com/chenzihaojie/test-drone</span><br><span class="line"></span><br><span class="line"><span class="built_in">clone</span>:</span><br><span class="line">  git:</span><br><span class="line">    image: plugins/git</span><br><span class="line">    extra_hosts:</span><br><span class="line">      - <span class="string">&quot;git.rhel.cc:172.16.0.189&quot;</span></span><br><span class="line"></span><br><span class="line">pipeline:</span><br><span class="line">  build:</span><br><span class="line">    image: golang</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/.ssh/:/root/.ssh/</span><br><span class="line">    commands:</span><br><span class="line">      - make</span><br><span class="line">      - scp test-drone root@172.16.0.123:/tmp/test-drone</span><br><span class="line">    extra_hosts:</span><br><span class="line">      - <span class="string">&quot;git.rhel.cc:172.16.0.189&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>gitlab</tag>
        <tag>drone</tag>
        <tag>devops</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装Jira</title>
    <url>/2018/12/10/docker-install-jira/</url>
    <content><![CDATA[<p>使用docker安装atlassian家族软件Jira，已经集成破解文件。利用docker三剑客之一docker-compose一键启动，最小配置化，方便省心。</p>
<span id="more"></span>

<h2 id="docker安装Jira"><a href="#docker安装Jira" class="headerlink" title="docker安装Jira"></a>docker安装Jira</h2><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><p>直接下载官方二进制文件安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.17.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="下载集成的Jira镜像"><a href="#下载集成的Jira镜像" class="headerlink" title="下载集成的Jira镜像"></a>下载集成的Jira镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull chenzihaojie/atlassian-jira-software:7.13.0</span><br></pre></td></tr></table></figure>

<h3 id="启动Jira容器"><a href="#启动Jira容器" class="headerlink" title="启动Jira容器"></a>启动Jira容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chenzihaojie/atlassian-docker</span><br><span class="line"><span class="built_in">cd</span> atlassian-docker/jira/7.13.0/</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$HOME</span>/jira/var_atlassian_jira&quot;</span></span><br><span class="line"><span class="built_in">chown</span> -R nobody:nobody <span class="variable">$HOME</span>/jira</span><br><span class="line"><span class="built_in">chmod</span> -R 777 <span class="variable">$HOME</span>/jira</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="配置Jira"><a href="#配置Jira" class="headerlink" title="配置Jira"></a>配置Jira</h3><h4 id="打开Jira首页"><a href="#打开Jira首页" class="headerlink" title="打开Jira首页"></a>打开Jira首页</h4><p>http:&#x2F;&#x2F;主机ip:20012</p>
<h4 id="选择中文"><a href="#选择中文" class="headerlink" title="选择中文"></a>选择中文</h4><p><img src="/images/jira-2018-12-10_202545.png"></p>
<h4 id="设置Jira"><a href="#设置Jira" class="headerlink" title="设置Jira"></a>设置Jira</h4><p>选择第二项, 适用于生产环境安装</p>
<h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">数据库类型：MySQL</span><br><span class="line">主机：jira-mysql</span><br><span class="line">数据库：jira</span><br><span class="line">用户：jira</span><br><span class="line">密码：jira</span><br></pre></td></tr></table></figure>
<p><img src="/images/jira-2018-12-10_202910.png"></p>
<h4 id="设置应用程序的属性"><a href="#设置应用程序的属性" class="headerlink" title="设置应用程序的属性"></a>设置应用程序的属性</h4><p><img src="/images/jira-2018-12-10_203041.png"></p>
<h4 id="填写授权码"><a href="#填写授权码" class="headerlink" title="填写授权码"></a>填写授权码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AAABDA0ODAoPeNptUEtPg0AQvu+vIPG8ZsEKlmQPFda6DVAENB68rHTUbdotmQVi/71QTHykh5lM5nvMl7m4Q+2sOuOwwGHz8PomnDFnmVaOx9wrEoOtUTetPhi+ksXiJXREr3adGjckQjgNsWqBj3zKfMoCstWoLhNdg7EgNvqkFlkliryQpSA/DrzFDv7Qq2MDmdoDj9ZpKopILpIJV3Wre5gEu4n7BGhHE4+kSpsWjDI1iM9G4/FXomBMtMZ3ZbSdjm4PWpnN0M1knXX7V8D126MdDDl1SQnYA8qY31b5A5WRLKgfP0d0du8uSSkyPhRNPJ/5njcn38kHeiLjc8j5SHmH9Yey8P95XxVof60wKwITfDIxHZPgo323OEKd2FJ4BXvU7wIUIbLvXQNrkIAf4AL2Aeu4ZBRbTOA=X02dl</span><br></pre></td></tr></table></figure>
<p><img src="/images/jira-2018-12-10_203115.png"></p>
<h4 id="配置管理员用户"><a href="#配置管理员用户" class="headerlink" title="配置管理员用户"></a>配置管理员用户</h4><p><img src="/images/jira-2018-12-10_203230.png"></p>
<h4 id="配置邮件通知"><a href="#配置邮件通知" class="headerlink" title="配置邮件通知"></a>配置邮件通知</h4><p><img src="/images/jira-2018-12-10_203314.png"></p>
<h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成~~"></a>安装完成~~</h4>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>atlassian</tag>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建Rasycast API代理</title>
    <url>/2024/12/09/docker-rasycast-api-proxy/</url>
    <content><![CDATA[<p>拦截并实现 raycast ai 的后端 api，实现本地化，方便使用。</p>
<span id="more"></span>

<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkcert -key-file backend.raycast.com.key -cert-file backend.raycast.com.cert backend.raycast.com</span><br></pre></td></tr></table></figure>

<h2 id="安装证书，并修改-host"><a href="#安装证书，并修改-host" class="headerlink" title="安装证书，并修改 host"></a>安装证书，并修改 host</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xx.xx.xx.xx backend.raycast.com</span><br></pre></td></tr></table></figure>

<h2 id="安装后端服务"><a href="#安装后端服务" class="headerlink" title="安装后端服务"></a>安装后端服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name raycast \</span><br><span class="line">    -e OPENAI_API_KEY=sk-xxx \</span><br><span class="line">    -p 443:443 \</span><br><span class="line">    --dns 1.1.1.1 \</span><br><span class="line">    -v $PWD/cert/:/data/cert \</span><br><span class="line">    -e CERT_FILE=/data/cert/backend.raycast.com.cert.pem \</span><br><span class="line">    -e CERT_KEY=/data/cert/backend.raycast.com.key.pem \</span><br><span class="line">    -e LOG_LEVEL=INFO \</span><br><span class="line">    -d \</span><br><span class="line">    ghcr.io/yufeikang/raycast_api_proxy:main</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://backend.raycast.com/v1/chat/completions -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;&quot;model&quot;: &quot;gpt-4o-mini&quot;, &quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello, world!&quot;&#125;]&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/yufeikang/raycast_api_proxy">https://github.com/yufeikang/raycast_api_proxy</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>rasycast</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>在AD域中启用ldaps协议</title>
    <url>/2019/05/27/enable-ladps-in-active-directory/</url>
    <content><![CDATA[<p>本文介绍如何在AD域名中启用ldaps协议</p>
<span id="more"></span>

<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>首先需要安装git和cmder工具，下载地址如下：<br>git for windows<br><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>cmder mini<br><a href="https://github.com/cmderdev/cmder/releases/download/v1.3.11/cmder_mini.zip">https://github.com/cmderdev/cmder/releases/download/v1.3.11/cmder_mini.zip</a></p>
<h3 id="二、启用ldaps"><a href="#二、启用ldaps" class="headerlink" title="二、启用ldaps"></a>二、启用ldaps</h3><p>(1)创建ca根证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out ca.key 4096</span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-05-27_165848.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -days 3650 -key ca.key -out ca.crt</span><br></pre></td></tr></table></figure>
<p>如下：只需要填Common Name为ad域(jier.site)<br><img src="/images/2019-05-27_165936.png"></p>
<p>(2)导入ca根证书到本地计算机<br>执行命令certlm.msc，打开本地计算机的证书控制台<br><img src="/images/2019-05-27_170612.png"></p>
<p>导入ca根证书到”本地计算机\受信任的根证书颁发机构”<br><img src="/images/2019-05-27_170633.png"></p>
<p>(3)生成request.inf<br>如下：指定CN为本地计算机全名<br><img src="/images/2019-05-27_171029.png"></p>
<p>内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Version]</span><br><span class="line">Signature=<span class="string">&quot;<span class="variable">$Windows</span> NT$&quot;</span></span><br><span class="line"></span><br><span class="line">[NewRequest]</span><br><span class="line">Subject = <span class="string">&quot;CN=Ethan.jier.site&quot;</span></span><br><span class="line">KeySpec = 1</span><br><span class="line">KeyLength = 1024</span><br><span class="line">Exportable = TRUE</span><br><span class="line">MachineKeySet = TRUE</span><br><span class="line">SMIME = FALSE</span><br><span class="line">PrivateKeyArchive = FALSE</span><br><span class="line">UserProtected = FALSE</span><br><span class="line">UseExistingKeySet = FALSE</span><br><span class="line">ProviderName = <span class="string">&quot;Microsoft RSA SChannel Cryptographic Provider&quot;</span></span><br><span class="line">ProviderType = 12</span><br><span class="line">RequestType = PKCS10</span><br><span class="line">KeyUsage = 0xa0</span><br><span class="line"></span><br><span class="line">[EnhancedKeyUsageExtension]</span><br><span class="line">OID = 1.3.6.1.5.5.7.3.1 ; Server Authentication</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(4)生成client.csr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certreq -new request.inf client.csr</span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-05-27_171302.png"></p>
<p>(5)生成v3ext.txt<br><img src="/images/2019-05-27_171357.png"></p>
<p>内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keyUsage=digitalSignature,keyEncipherment</span><br><span class="line">extendedKeyUsage=serverAuth</span><br><span class="line">subjectKeyIdentifier=<span class="built_in">hash</span></span><br></pre></td></tr></table></figure>

<p>(6)生成client.crt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> client.csr -CA ca.crt -CAkey ca.key -extfile v3ext.txt -set_serial 01 -out client.crt</span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-05-27_171435.png"></p>
<p>(7)导入客户端证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certreq -accept client.crt</span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-05-27_171729.png"></p>
<p>(8)生成ldap-renewservercert.txt<br><img src="/images/2019-05-27_171730.png"></p>
<p>内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dn:</span><br><span class="line">changetype: modify</span><br><span class="line">add: renewServerCertificate</span><br><span class="line">renewServerCertificate: 1</span><br><span class="line">-</span><br></pre></td></tr></table></figure>

<p>(9)刷新ad域名证书配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldifde -i -f ldap-renewservercert.txt</span><br></pre></td></tr></table></figure>
<p><img src="/images/2019-05-27_171744.png"></p>
<p>(10)使用LdapAdmin测试连接<br><img src="/images/2019-05-27_171906.png"></p>
<h3 id="三、参考链接"><a href="#三、参考链接" class="headerlink" title="三、参考链接"></a>三、参考链接</h3><p><a href="http://www.javaxt.com/tutorials/windows/how_to_enable_ldaps_in_active_directory">http://www.javaxt.com/tutorials/windows/how_to_enable_ldaps_in_active_directory</a><br><a href="https://gist.github.com/magnetikonline/0ccdabfec58eb1929c997d22e7341e45">https://gist.github.com/magnetikonline/0ccdabfec58eb1929c997d22e7341e45</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>AD</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 部署后出现白屏问题</title>
    <url>/2024/12/11/hexo-deploy-white-screen/</url>
    <content><![CDATA[<p>在使用 Hexo 部署博客后，访问网站时出现白屏现象，即页面完全空白，没有任何内容显示。这是一个比较常见的问题，本文将介绍几种常见的解决方案。</p>
<span id="more"></span>

<h2 id="常见原因及解决方法"><a href="#常见原因及解决方法" class="headerlink" title="常见原因及解决方法"></a>常见原因及解决方法</h2><h3 id="1-配置文件中的-URL-设置问题"><a href="#1-配置文件中的-URL-设置问题" class="headerlink" title="1. 配置文件中的 URL 设置问题"></a>1. 配置文件中的 URL 设置问题</h3><p>检查 <code>_config.yml</code> 文件中的 URL 配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL 配置</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://你的用户名.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>确保 URL 设置正确，特别是如果你使用自定义域名，需要将 URL 改为你的域名。</p>
<h3 id="2-主题路径问题"><a href="#2-主题路径问题" class="headerlink" title="2. 主题路径问题"></a>2. 主题路径问题</h3><p>检查主题文件夹是否存在，以及 <code>_config.yml</code> 中的主题配置是否正确：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">your-theme-name</span></span><br></pre></td></tr></table></figure>

<p>如果使用 git 子模块方式安装主题，确保主题文件已正确克隆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>

<p><strong>我更新 hexo 遇到的是这个问题，暴力的解法是删除子模块目录下的 .git 文件夹，再重新提交代码，然后发布</strong></p>
<h3 id="3-资源文件路径问题"><a href="#3-资源文件路径问题" class="headerlink" title="3. 资源文件路径问题"></a>3. 资源文件路径问题</h3><p>确保所有资源文件（CSS、JavaScript）的路径正确。可以：</p>
<ol>
<li><p>清理缓存后重新生成</p>
</li>
<li><p>部署</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>检查主题配置文件中的资源路径是否正确，特别是 CDN 链接。</li>
</ol>
<h3 id="4-Node-js-版本兼容性"><a href="#4-Node-js-版本兼容性" class="headerlink" title="4. Node.js 版本兼容性"></a>4. Node.js 版本兼容性</h3><p>某些情况下，Node.js 版本可能会导致部署问题。建议：</p>
<ul>
<li>使用 LTS 版本的 Node.js</li>
<li>确保 Node.js 版本与 Hexo 及主题兼容</li>
</ul>
<h3 id="5-部署配置问题"><a href="#5-部署配置问题" class="headerlink" title="5. 部署配置问题"></a>5. 部署配置问题</h3><p>检查部署配置是否正确：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 或者 master，取决于你的默认分支</span></span><br></pre></td></tr></table></figure>

<h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><ol>
<li>使用浏览器开发者工具（F12）查看控制台错误信息</li>
<li>检查网络请求，查看资源加载情况</li>
<li>尝试清除浏览器缓存后重新访问</li>
<li>本地预览是否正常：<code>hexo server</code></li>
</ol>
<h2 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h2><ol>
<li>部署前先在本地预览</li>
<li>保持主题和 Hexo 版本更新</li>
<li>做好配置文件备份</li>
<li>使用版本控制管理源文件</li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>遇到白屏问题不要慌，按照以上步骤逐一排查，大多数情况下都能找到解决方案。如果问题仍然存在，可以：</p>
<ul>
<li>查看 Hexo 官方文档</li>
<li>检查主题的 GitHub Issues</li>
<li>在社区寻求帮助</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>deploy</tag>
        <tag>问题排查</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中markdown基本语法</title>
    <url>/2018/10/21/hexo-markdown-grammar/</url>
    <content><![CDATA[<p>本文介绍在hexo网站中用到的、比较实用的markdown基础语法</p>
<p>标题: 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。标准语法一般在#后跟个空格再写文字  </p>
<p>换行: 两个空格 + 回车  </p>
<span id="more"></span>

<p>有序列表: 数字 + 点号  </p>
<p>无序列表: 用 + * 任何一种都可以  </p>
<p>列表嵌套: 上一级和下一级之间敲三个空格  </p>
<p>图片: ![图片alt](图片地址)</p>
<p>超链接: [超链接名](超链接地址)  </p>
<p>行内标记：代码之间分别用一个反引号包起来  </p>
<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行  </p>
<p>字体加粗: 要加粗的文字左右分别用两个 * 号包起来  </p>
<p>字体斜体: 要倾斜的文字左右分别用一个 * 号包起来  </p>
<p>斜体且加粗: 要倾斜和加粗的文字左右分别用三个 * 号包起来  </p>
<p>字体删除线: 要加删除线的文字左右分别用两个 ~~ 号包起来  </p>
<p>字体颜色: html标签&lt;font color&#x3D;’Red’&gt;&lt;&#x2F;font&gt;  </p>
<p>分割线: 三个或者三个以上的 或者 * 都可以  </p>
<p>引用文字: 在引用的文字前加&gt;和空格。引用也可以嵌套，如加两个 &gt;&gt; 三个 &gt;&gt;&gt; n个 …  </p>
<p>转义: 在特殊字符前面插入反斜杠  </p>
<p>特殊字符包括：反斜线、反引号、星号、底线、花括号、方括号、括弧、井字号、加号、减号、英文句点、惊叹号</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>LdapAdmin连接AD域</title>
    <url>/2019/05/27/ldapadmin-connect-active-directory/</url>
    <content><![CDATA[<p>本文介绍如何使用LdapAdmin连接AD域并查看其中的成员</p>
<span id="more"></span>

<h3 id="一、创建AD域的管理员admin"><a href="#一、创建AD域的管理员admin" class="headerlink" title="一、创建AD域的管理员admin"></a>一、创建AD域的管理员admin</h3><p>(1)打开”Active Directory 用户和计算机”<br><img src="/images/2019-05-27_154137.png"></p>
<p>(2)创建用户admin<br><img src="/images/2019-05-27_154256.png"><br><img src="/images/2019-05-27_154357.png"></p>
<p>(3)设置密码永不过期<br><img src="/images/2019-05-27_154500.png"></p>
<h3 id="二、委派管理权限给admin"><a href="#二、委派管理权限给admin" class="headerlink" title="二、委派管理权限给admin"></a>二、委派管理权限给admin</h3><p>(1)右键点击”jier.site”，选择”委派控制”<br><img src="/images/2019-05-27_154538.png"></p>
<p>(2)选择admin用户<br><img src="/images/2019-05-27_154603.png"></p>
<p>(3)创建自定义任务委派<br><img src="/images/2019-05-27_154604.png"><br><img src="/images/2019-05-27_154605.png"></p>
<p>(4)勾选所有权限，完全控制<br><img src="/images/2019-05-27_154606.png"></p>
<p>(5)完成管理权限委派<br><img src="/images/2019-05-27_154607.png"></p>
<h3 id="三、使用admin用户连接AD域"><a href="#三、使用admin用户连接AD域" class="headerlink" title="三、使用admin用户连接AD域"></a>三、使用admin用户连接AD域</h3><p>(1)新建组织单位test_ou<br><img src="/images/2019-05-27_155006.png"></p>
<p>(2)连接组织单位test_ou<br><img src="/images/2019-05-27_155110.png"><br><img src="/images/20190527184141.png"></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>AD</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>电影情书</title>
    <url>/2024/12/10/movie-love-letter/</url>
    <content><![CDATA[<p>《情书》是一部由岩井俊二执导，中山美穗等人主演的日本电影，讲述了博子在未婚夫去世后，通过寄情书的方式，与未婚夫的同名同姓同学藤井树展开一段跨越时空的爱情故事。电影以其独特的叙事方式和深刻的情感表达，赢得了观众和评论家的一致好评，以及多个电影奖项。</p>
<span id="more"></span>

<h2 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h2><p>博子在未婚夫去世后，通过寄情书的方式与未婚夫的同名同姓同学藤井树展开一段爱情故事。两人之间的奇妙联系和深刻的情感交流，让他们重新审视了自己的人生和爱情。</p>
<h2 id="角色和演员"><a href="#角色和演员" class="headerlink" title="角色和演员"></a>角色和演员</h2><p>电影中的主要角色包括：</p>
<ul>
<li>渡边博子</li>
<li>藤井树（女）</li>
<li>秋叶茂</li>
</ul>
<p>由中山美穗、丰川悦司等演员出演，演技备受好评。</p>
<h2 id="获奖情况"><a href="#获奖情况" class="headerlink" title="获奖情况"></a>获奖情况</h2><p>《情书》在日本电影学院奖等多个电影奖项中获得多个奖项，包括：</p>
<ul>
<li>最佳作品奖</li>
<li>最佳男配角奖</li>
<li>最佳新人演员奖</li>
</ul>
<p>展示了其在电影界的卓越成就。</p>
<h2 id="影片风格"><a href="#影片风格" class="headerlink" title="影片风格"></a>影片风格</h2><p>《情书》以其温暖、治愈的风格，深入探讨了爱情、失去和记忆的主题，观众对其情感深度和艺术表现力给予了高度评价。</p>
]]></content>
      <tags>
        <tag>电影</tag>
        <tag>日本电影</tag>
        <tag>情感</tag>
        <tag>中山美穗</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Server 2019安装AD域</title>
    <url>/2019/05/27/windows-server-install-active-directory/</url>
    <content><![CDATA[<p>记录Windows Server 2019上全新安装AD域的全过程</p>
<span id="more"></span>

<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>首先准备1台服务器，安装Windows Server 2019</p>
<h3 id="二、安装AD域"><a href="#二、安装AD域" class="headerlink" title="二、安装AD域"></a>二、安装AD域</h3><p>(1)打开服务器管理器，添加角色和功能<br><img src="/images/2019-05-27_145038.png"></p>
<p>(2)出现”添加角色和功能”界面，下一步<br><img src="/images/2019-05-27_145111.png"></p>
<p>(3)根据提示操作，下一步<br><img src="/images/2019-05-27_145138.png"><br><img src="/images/2019-05-27_145209.png"></p>
<p>(4)选择添加AD域服务(Active Directory 域服务)，同时添加所需功能<br><img src="/images/2019-05-27_145320.png"><br><img src="/images/2019-05-27_145352.png"></p>
<p>(5)根据提示操作，下一步<br><img src="/images/2019-05-27_145442.png"><br><img src="/images/2019-05-27_145601.png"></p>
<p>(6)安装完成<br><img src="/images/2019-05-27_145623.png"></p>
<h3 id="三、配置AD域"><a href="#三、配置AD域" class="headerlink" title="三、配置AD域"></a>三、配置AD域</h3><p>(1)点击”将此服务器提升为域控制器”<br><img src="/images/2019-05-27_150726.png"></p>
<p>(2)进入AD域服务器配置向导，选择”添加新林”，输入域，点击下一步<br><img src="/images/2019-05-27_150818.png"></p>
<p>(3)填写密码，下一步<br><img src="/images/2019-05-27_151824.png"></p>
<p>(4)出现关于DNS的警告，因为目前还没有安装DNS，所以不用理会，直接选择下一步，如图<br><img src="/images/2019-05-27_151916.png"></p>
<p>(5)其他选项，默认，下一步<br><img src="/images/2019-05-27_151953.png"></p>
<p>(6)安装路径，默认，下一步<br><img src="/images/2019-05-27_152018.png"></p>
<p>(7)查看选项，默认，下一步<br><img src="/images/2019-05-27_152043.png"></p>
<p>(8)先决条件检查，默认，下一步<br><img src="/images/2019-05-27_152126.png"></p>
<p>(9)启动安装，如图<br><img src="/images/2019-05-27_152241.png"></p>
<p>(10)安装完成</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>AD</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
</search>
